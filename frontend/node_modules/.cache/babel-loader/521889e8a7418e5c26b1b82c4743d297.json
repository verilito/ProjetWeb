{"ast":null,"code":"var PersistentStorage = require('./persistent_storage');\n\nvar _ = require('./utils');\n\nvar keys = {\n  data: 'data',\n  protocol: 'protocol',\n  thumbprint: 'thumbprint'\n};\nvar location = null;\n\nif (typeof window !== 'undefined') {\n  location = window.location;\n} else {\n  location = {\n    protocol: 'https:'\n  };\n} // constructor\n// -----------\n// defaults for options are handled in options_parser\n\n\nfunction Prefetch(o) {\n  this.url = o.url;\n  this.ttl = o.ttl;\n  this.cache = o.cache;\n  this.prepare = o.prepare;\n  this.transform = o.transform;\n  this.transport = o.transport;\n  this.thumbprint = o.thumbprint;\n  this.storage = new PersistentStorage(o.cacheKey);\n}\n\n_.mixin(Prefetch.prototype, {\n  _settings: function () {\n    return {\n      url: this.url,\n      type: 'GET',\n      dataType: 'json'\n    };\n  },\n  store: function (data) {\n    if (!this.cache) {\n      return;\n    }\n\n    this.storage.set(keys.data, data, this.ttl);\n    this.storage.set(keys.protocol, location.protocol, this.ttl);\n    this.storage.set(keys.thumbprint, this.thumbprint, this.ttl);\n  },\n  fromCache: function () {\n    var stored = {},\n        isExpired;\n\n    if (!this.cache) {\n      return null;\n    }\n\n    stored.data = this.storage.get(keys.data);\n    stored.protocol = this.storage.get(keys.protocol);\n    stored.thumbprint = this.storage.get(keys.thumbprint); // the stored data is considered expired if the thumbprints\n    // don't match or if the protocol it was originally stored under\n    // has changed\n\n    isExpired = stored.thumbprint !== this.thumbprint || stored.protocol !== location.protocol; // TODO: if expired, remove from local storage\n\n    return stored.data && !isExpired ? stored.data : null;\n  },\n  fromNetwork: function (cb) {\n    var that = this,\n        settings;\n\n    if (!cb) {\n      return;\n    }\n\n    settings = this.prepare(this._settings()); // this.transport(settings).fail(onError).done(onResponse);\n\n    this.transport(settings).then(onResponse, onError);\n\n    function onError() {\n      cb(true);\n    }\n\n    function onResponse(resp) {\n      cb(null, that.transform(resp));\n    }\n  },\n  clear: function () {\n    this.storage.clear();\n    return this;\n  }\n});\n\nmodule.exports = Prefetch;","map":null,"metadata":{},"sourceType":"script"}