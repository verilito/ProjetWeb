{"ast":null,"code":"/*\n * typeahead.js\n * https://github.com/twitter/typeahead.js\n * Copyright 2013-2014 Twitter, Inc. and other contributors; Licensed MIT\n */\n// inspired by https://github.com/jharding/lru-cache\nvar _ = require('./utils');\n\nfunction LruCache(maxSize) {\n  this.maxSize = _.isNumber(maxSize) ? maxSize : 100;\n  this.reset(); // if max size is less than 0, provide a noop cache\n\n  if (this.maxSize <= 0) {\n    this.set = this.get = _.noop;\n  }\n}\n\n_.mixin(LruCache.prototype, {\n  set: function set(key, val) {\n    var tailItem = this.list.tail,\n        node; // at capacity\n\n    if (this.size >= this.maxSize) {\n      this.list.remove(tailItem);\n      delete this.hash[tailItem.key];\n      this.size--;\n    } // writing over existing key\n\n\n    if (node = this.hash[key]) {\n      node.val = val;\n      this.list.moveToFront(node);\n    } // new key\n    else {\n        node = new Node(key, val);\n        this.list.add(node);\n        this.hash[key] = node;\n        this.size++;\n      }\n  },\n  get: function get(key) {\n    var node = this.hash[key];\n\n    if (node) {\n      this.list.moveToFront(node);\n      return node.val;\n    }\n  },\n  reset: function reset() {\n    this.size = 0;\n    this.hash = {};\n    this.list = new List();\n  }\n});\n\nfunction List() {\n  this.head = this.tail = null;\n}\n\n_.mixin(List.prototype, {\n  add: function add(node) {\n    if (this.head) {\n      node.next = this.head;\n      this.head.prev = node;\n    }\n\n    this.head = node;\n    this.tail = this.tail || node;\n  },\n  remove: function remove(node) {\n    node.prev ? node.prev.next = node.next : this.head = node.next;\n    node.next ? node.next.prev = node.prev : this.tail = node.prev;\n  },\n  moveToFront: function (node) {\n    this.remove(node);\n    this.add(node);\n  }\n});\n\nfunction Node(key, val) {\n  this.key = key;\n  this.val = val;\n  this.prev = this.next = null;\n}\n\nmodule.exports = LruCache;","map":null,"metadata":{},"sourceType":"script"}