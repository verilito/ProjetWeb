{"ast":null,"code":"var storage2 = require('storage2');\n\nvar _ = require('./utils');\n\nvar LOCAL_STORAGE;\n\ntry {\n  LOCAL_STORAGE = storage2.localStorage; // while in private browsing mode, some browsers make\n  // localStorage available, but throw an error when used\n\n  LOCAL_STORAGE.setItem('~~~', '!');\n  LOCAL_STORAGE.removeItem('~~~');\n} catch (err) {\n  LOCAL_STORAGE = null;\n} // constructor\n// -----------\n\n\nfunction PersistentStorage(namespace, override) {\n  this.prefix = ['__', namespace, '__'].join('');\n  this.ttlKey = '__ttl__';\n  this.keyMatcher = new RegExp('^' + _.escapeRegExChars(this.prefix)); // for testing purpose\n\n  this.ls = override || LOCAL_STORAGE; // if local storage isn't available, everything becomes a noop\n\n  !this.ls && this._noop();\n} // instance methods\n// ----------------\n\n\n_.mixin(PersistentStorage.prototype, {\n  // ### private\n  _prefix: function (key) {\n    return this.prefix + key;\n  },\n  _ttlKey: function (key) {\n    return this._prefix(key) + this.ttlKey;\n  },\n  _noop: function () {\n    this.get = this.set = this.remove = this.clear = this.isExpired = _.noop;\n  },\n  _safeSet: function (key, val) {\n    try {\n      this.ls.setItem(key, val);\n    } catch (err) {\n      // hit the localstorage limit so clean up and better luck next time\n      if (err.name === 'QuotaExceededError') {\n        this.clear();\n\n        this._noop();\n      }\n    }\n  },\n  // ### public\n  get: function (key) {\n    if (this.isExpired(key)) {\n      this.remove(key);\n    }\n\n    return decode(this.ls.getItem(this._prefix(key)));\n  },\n  set: function (key, val, ttl) {\n    if (_.isNumber(ttl)) {\n      this._safeSet(this._ttlKey(key), encode(now() + ttl));\n    } else {\n      this.ls.removeItem(this._ttlKey(key));\n    }\n\n    return this._safeSet(this._prefix(key), encode(val));\n  },\n  remove: function (key) {\n    this.ls.removeItem(this._ttlKey(key));\n    this.ls.removeItem(this._prefix(key));\n    return this;\n  },\n  clear: function () {\n    var i,\n        keys = gatherMatchingKeys(this.keyMatcher);\n\n    for (i = keys.length; i--;) {\n      this.remove(keys[i]);\n    }\n\n    return this;\n  },\n  isExpired: function (key) {\n    var ttl = decode(this.ls.getItem(this._ttlKey(key)));\n    return _.isNumber(ttl) && now() > ttl ? true : false;\n  }\n}); // helper functions\n// ----------------\n\n\nfunction now() {\n  return new Date().getTime();\n}\n\nfunction encode(val) {\n  // convert undefined to null to avoid issues with JSON.parse\n  return JSON.stringify(_.isUndefined(val) ? null : val);\n}\n\nfunction decode(val) {\n  return JSON.parse(val); // return $.parseJSON(val);\n}\n\nfunction gatherMatchingKeys(keyMatcher) {\n  var i,\n      key,\n      keys = [],\n      len = LOCAL_STORAGE.length;\n\n  for (i = 0; i < len; i++) {\n    if ((key = LOCAL_STORAGE.key(i)).match(keyMatcher)) {\n      keys.push(key.replace(keyMatcher, ''));\n    }\n  }\n\n  return keys;\n}\n\nmodule.exports = PersistentStorage;","map":null,"metadata":{},"sourceType":"script"}