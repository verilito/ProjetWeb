{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp64\\\\www\\\\www\\\\ProjetWeb\\\\frontend\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Search from './Search';\nimport Card from './Card';\nimport $ from 'jquery'; //import \"typeahead.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movieID: 157336 // set initital load movie named Interstellar\n\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(Search, {\n      fetchMovieID: this.fetchMovieID.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }), React.createElement(Card, {\n      data: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }));\n  } // Api request function\n\n\n  fetchApi(url) {\n    fetch(url).then(res => res.json()).then(data => {\n      // update state with API data\n      this.setState({\n        movieID: data.id,\n        original_title: data.original_title,\n        tagline: data.tagline,\n        overview: data.overview,\n        homepage: data.homepage,\n        poster: data.poster_path,\n        production: data.production_companies,\n        production_countries: data.production_countries,\n        genre: data.genres,\n        release: data.release_date,\n        vote: data.vote_average,\n        runtime: data.runtime,\n        revenue: data.revenue,\n        backdrop: data.backdrop_path\n      });\n    }); // .catch((err) => console.log('Movie not found!'))\n  }\n\n  fetchMovieID(movieID) {\n    let url = \"https://api.themoviedb.org/3/movie/\".concat(movieID, \"?&api_key=cfe422613b250f702980a3bbf9e90716\");\n    this.fetchApi(url);\n  }\n\n  componentDidMount() {\n    var Bloodhound = require('bloodhound-js');\n\n    let url = \"https://api.themoviedb.org/3/movie/\".concat(this.state.movieID, \"?&api_key=cfe422613b250f702980a3bbf9e90716\");\n    this.fetchApi(url); //========================= BLOODHOUND ==============================//\n\n    var suggests = new Bloodhound({\n      datumTokenizer: function (datum) {\n        return Bloodhound.tokenizers.whitespace(datum.value);\n      },\n      queryTokenizer: Bloodhound.tokenizers.whitespace,\n      remote: {\n        url: 'https://api.themoviedb.org/3/search/movie?query=%QUERY&api_key=cfe422613b250f702980a3bbf9e90716',\n        filter: function (movies) {\n          // Map the remote source JSON array to a JavaScript object array\n          return $.map(movies.results, function (movie) {\n            return {\n              value: movie.original_title,\n              // search original title\n              id: movie.id // get ID of movie simultaniously\n\n            };\n          });\n        } // end filter\n\n      } // end remote\n\n    }); // end new Bloodhound\n\n    suggests.initialize(); // initialise bloodhound suggestion engine\n    //========================= END BLOODHOUND ==============================//\n    //========================= TYPEAHEAD ==============================//\n    // Instantiate the Typeahead UI\n\n    $('.typeahead').typeahead({\n      hint: true,\n      highlight: true,\n      minLength: 2\n    }, {\n      source: suggests.ttAdapter()\n    }).on('typeahead:selected', function (obj, datum) {\n      this.fetchMovieID(datum.id);\n    }.bind(this)); // END Instantiate the Typeahead UI\n    //========================= END TYPEAHEAD ==============================//\n  }\n\n} //module.exports = App;\n\n\nexport default App;","map":{"version":3,"sources":["C:/wamp64/www/www/ProjetWeb/frontend/src/App.js"],"names":["React","Component","Search","Card","$","App","constructor","props","state","movieID","render","fetchMovieID","bind","fetchApi","url","fetch","then","res","json","data","setState","id","original_title","tagline","overview","homepage","poster","poster_path","production","production_companies","production_countries","genre","genres","release","release_date","vote","vote_average","runtime","revenue","backdrop","backdrop_path","componentDidMount","Bloodhound","require","suggests","datumTokenizer","datum","tokenizers","whitespace","value","queryTokenizer","remote","filter","movies","map","results","movie","initialize","typeahead","hint","highlight","minLength","source","ttAdapter","on","obj"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Search from './Search';\r\nimport Card from './Card';\r\nimport $ from 'jquery';\r\n//import \"typeahead.js\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      movieID: 157336 // set initital load movie named Interstellar\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Search fetchMovieID={this.fetchMovieID.bind(this)} />\r\n        <Card data={this.state} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Api request function\r\n  fetchApi(url) {\r\n\r\n    fetch(url).then((res) => res.json()).then((data) => {\r\n      // update state with API data\r\n      this.setState({\r\n        movieID: data.id,\r\n        original_title: data.original_title,\r\n        tagline: data.tagline,\r\n        overview: data.overview,\r\n        homepage: data.homepage,\r\n        poster: data.poster_path,\r\n        production: data.production_companies,\r\n        production_countries: data.production_countries,\r\n        genre: data.genres,\r\n        release: data.release_date,\r\n        vote: data.vote_average,\r\n        runtime: data.runtime,\r\n        revenue: data.revenue,\r\n        backdrop: data.backdrop_path\r\n\r\n      })\r\n    })\r\n\r\n    // .catch((err) => console.log('Movie not found!'))\r\n\r\n  }\r\n\r\n  fetchMovieID(movieID) {\r\n    let url = `https://api.themoviedb.org/3/movie/${movieID}?&api_key=cfe422613b250f702980a3bbf9e90716`\r\n    this.fetchApi(url)\r\n  }\r\n\r\n  componentDidMount() {\r\n    var Bloodhound = require('bloodhound-js');\r\n    let url = `https://api.themoviedb.org/3/movie/${this.state.movieID}?&api_key=cfe422613b250f702980a3bbf9e90716`\r\n    this.fetchApi(url)\r\n\r\n    //========================= BLOODHOUND ==============================//\r\n\r\n    var suggests = new Bloodhound({\r\n      datumTokenizer: function (datum) {\r\n        return Bloodhound.tokenizers.whitespace(datum.value);\r\n      },\r\n      queryTokenizer: Bloodhound.tokenizers.whitespace,\r\n      remote: {\r\n        url: 'https://api.themoviedb.org/3/search/movie?query=%QUERY&api_key=cfe422613b250f702980a3bbf9e90716',\r\n        filter: function (movies) {\r\n          // Map the remote source JSON array to a JavaScript object array\r\n          return $.map(movies.results, function (movie) {\r\n            return {\r\n              value: movie.original_title, // search original title\r\n              id: movie.id // get ID of movie simultaniously\r\n            };\r\n          });\r\n        } // end filter\r\n      } // end remote\r\n    }); // end new Bloodhound\r\n\r\n    suggests.initialize(); // initialise bloodhound suggestion engine\r\n\r\n    //========================= END BLOODHOUND ==============================//\r\n\r\n    //========================= TYPEAHEAD ==============================//\r\n    // Instantiate the Typeahead UI\r\n\r\n    $('.typeahead').typeahead({\r\n      hint: true,\r\n      highlight: true,\r\n      minLength: 2\r\n    }, { source: suggests.ttAdapter() }).on('typeahead:selected', function (obj, datum) {\r\n      this.fetchMovieID(datum.id)\r\n    }.bind(this)); // END Instantiate the Typeahead UI\r\n    //========================= END TYPEAHEAD ==============================//\r\n\r\n  }\r\n\r\n}\r\n//module.exports = App;\r\nexport default App;"]},"metadata":{},"sourceType":"module"}