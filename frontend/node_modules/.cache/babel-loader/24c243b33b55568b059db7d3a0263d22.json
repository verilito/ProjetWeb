{"ast":null,"code":"/*\n * typeahead.js\n * https://github.com/twitter/typeahead.js\n * Copyright 2013-2014 Twitter, Inc. and other contributors; Licensed MIT\n */\nvar assign = require('object-assign');\n\nvar _ = {\n  isMsie: function () {\n    // from https://github.com/ded/bowser/blob/master/bowser.js\n    return /(msie|trident)/i.test(navigator.userAgent) ? navigator.userAgent.match(/(msie |rv:)(\\d+(.\\d+)?)/i)[2] : false;\n  },\n  isBlankString: function (str) {\n    return !str || /^\\s*$/.test(str);\n  },\n  // http://stackoverflow.com/a/6969486\n  escapeRegExChars: function (str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n  },\n  isString: function (obj) {\n    return typeof obj === 'string';\n  },\n  isNumber: function (obj) {\n    return typeof obj === 'number';\n  },\n  isArray: Array.isArray,\n  isFunction: function (obj) {\n    return typeof obj === 'function';\n  },\n  isObject: function (obj) {\n    return typeof obj === 'object';\n  },\n  isUndefined: function (obj) {\n    return typeof obj === 'undefined';\n  },\n  isElement: function (obj) {\n    return !!(obj && obj.nodeType === 1);\n  },\n  isJQuery: function (obj) {\n    return obj instanceof $;\n  },\n  toStr: function toStr(s) {\n    return _.isUndefined(s) || s === null ? '' : s + '';\n  },\n  bind: function (fn, context) {\n    return fn.bind(context);\n  },\n  each: function (collection, cb) {\n    collection.forEach(cb);\n  },\n  map: function (array, fn) {\n    return array.map(fn);\n  },\n  filter: function (array, fn) {\n    return array.filter(fn);\n  },\n  every: function (obj, test) {\n    var result = true;\n\n    if (!obj) {\n      return result;\n    } // $.each(obj, function(key, val) {\n    //   if (!(result = test.call(null, val, key, obj))) {\n    //     return false;\n    //   }\n    // });\n\n\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        var val = obj[key];\n\n        if (!(result = test.call(null, val, key, obj))) {\n          return false;\n        }\n      }\n    }\n\n    return !!result;\n  },\n  some: function (obj, test) {\n    var result = false;\n\n    if (!obj) {\n      return result;\n    } // $.each(obj, function(key, val) {\n    //   if (result = test.call(null, val, key, obj)) {\n    //     return false;\n    //   }\n    // });\n\n\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        var val = obj[key];\n\n        if (result = test.call(null, val, key, obj)) {\n          return false;\n        }\n      }\n    }\n\n    return !!result;\n  },\n  mixin: require('object-assign'),\n  identity: function (x) {\n    return x;\n  },\n  clone: function (obj) {\n    return assign({}, obj);\n  },\n  getIdGenerator: function () {\n    var counter = 0;\n    return function () {\n      return counter++;\n    };\n  },\n  templatify: function templatify(obj) {\n    return _.isFunction(obj) ? obj : template;\n\n    function template() {\n      return String(obj);\n    }\n  },\n  defer: function (fn) {\n    setTimeout(fn, 0);\n  },\n  debounce: function (func, wait, immediate) {\n    var timeout, result;\n    return function () {\n      var context = this,\n          args = arguments,\n          later,\n          callNow;\n\n      later = function () {\n        timeout = null;\n\n        if (!immediate) {\n          result = func.apply(context, args);\n        }\n      };\n\n      callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n\n      if (callNow) {\n        result = func.apply(context, args);\n      }\n\n      return result;\n    };\n  },\n  throttle: function (func, wait) {\n    var context, args, timeout, result, previous, later;\n    previous = 0;\n\n    later = function () {\n      previous = new Date();\n      timeout = null;\n      result = func.apply(context, args);\n    };\n\n    return function () {\n      var now = new Date(),\n          remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n\n      if (remaining <= 0) {\n        clearTimeout(timeout);\n        timeout = null;\n        previous = now;\n        result = func.apply(context, args);\n      } else if (!timeout) {\n        timeout = setTimeout(later, remaining);\n      }\n\n      return result;\n    };\n  },\n  stringify: function (val) {\n    return _.isString(val) ? val : JSON.stringify(val);\n  },\n  noop: function () {},\n  error: function (msg) {\n    throw new Error(msg);\n  }\n};\nmodule.exports = _;","map":null,"metadata":{},"sourceType":"script"}